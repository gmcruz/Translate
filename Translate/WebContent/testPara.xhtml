<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">

	<head>
		<script src="js/jquery-1.11.1.min.js"></script>
		<title>Test Page</title>
				
		<style>			
			body {				
				border-style: dashed;
				border-width: 1px;
				color: green;				
			}
			
			#container {
				width: 650px;
				border-style: dashed;
				border-width: 2px;
				color: yellow;	
			} 
						
			#contentElem {				
				border-style: dotted;
				border-width: 1px;
				color: blue;					
			}
			#contentElem tr td{
				margin: 0;				
				padding: 0px 5px;
				list-style: none;
				float: left;
				border-style: dotted;
				border-width: 0px;
				color: black;							
			}	
						
			div .elemWord {
				font-size: 1.1em;
				padding: 0px 0px;	
				margin: 0;			
				border-style: dotted;
				border-width: 0px;
				color: black;	
				font-family: Verdana;
			}
			div .elemTranslation {
				font-size: .7em;
				color: #C0C0C0;
				padding: 0px 0px;
				margin: 0;
				border-style: dotted;
				border-width: 0px;					
				text-align: center;
			}
			
			
			.cf:before,	.cf:after {
			    content: " "; /* 1 */
			    display: table; /* 2 */
			}			
			.cf:after {
			    clear: both;
			}			
			/*** For IE 6/7 only Include this rule to trigger hasLayout and contain floats. */
			.cf {
			    *zoom: 1;
			}
				
			
		</style>
				
		<script type="text/javascript">
			
			$(document).ready(function(){
				$("#testp").click(function(){				    
						
					$.getJSON( "http://127.0.0.1:8080/TranslateModule/resource/tests/", function( data ) {
	
						if (data.hasOwnProperty("paragraphs")) {				
							var items = [];
							$.each( data.paragraphs, function( key, valParagraphs ) {
	
								if (valParagraphs.hasOwnProperty("paragraph")) {
	
									$.each( valParagraphs.paragraph, function( key, valParagraph ) {
										items.push( "<tr>" );									
										$.each( valParagraph.sentences, function( key, valSentence ) {
											
											var meaning = valSentence.meaning;
											//items.push( "<li>[" + meaning + "]</li>" );
											
											$.each( valSentence.sentence, function( key, valWord ) {
																							
												items.push( "<td>" );
												
												//Look ahead to what is next for punctuation
												var next = valSentence.sentence[key+1];
												var addPunc = "";
												//TODO change to a regex later
												if(next != undefined &amp;&amp; (next.word == "." || next.word == "," || next.word == "?" || next.word == "!" || next.word == ";" || next.word == ":"  || next.word == "-")){
													addPunc = next.word;												
												}											
																							
												//Punctuation just show as is.
												if(valWord.punc != undefined){
													//dont push out as it has been hanlded by the peek ahead.
												}
												//Ref word must loop to find in returned JSON
												else if(valWord.ref != undefined){												
													var tempRef = getObjects(data, "id", valWord.id);
													items.push( '<td><div class="elemWord">' + tempRef[0].word + addPunc + '</div><div class="elemTranslation">' + tempRef[0].translation + '</div></td>' );
												}
												//Regular word to process
												else if(valWord.ref == undefined){
													items.push( '<td><div class="elemWord">' + valWord.word + addPunc + '</div><div class="elemTranslation">' + valWord.translation + '</div></td>' );
												}	
												items.push( "</td>" );
												
											});
										});
										items.push( "</tr>" );
										items.push( "<tr><td><br/></td></tr>" );
										items.push( "<tr><td><br/></td></tr>" );
										
									});
	
								}
	
							});
							
							$("#contentElem").html("").html( items.join( "" ) );	
								
	
						}	
	
	
					});				
	
	
				});
			});
						
			function getObjects(obj, key, val) {			
			    var objects = [];
			    for (var i in obj) {		    	
			    	if (!obj.hasOwnProperty(i)) continue;
			        if (typeof obj[i] == 'object') {
			            objects = objects.concat(getObjects(obj[i], key, val));
			        } else if (i == key &amp;&amp; obj[key] == val &amp;&amp; obj.word != undefined) {		        	
			            objects.push(obj);
			        }
			    }
			    return objects;
			}
			
		</script>

	</head>

	<body>			
		<div id="testp">text here</div>
		<div id="container">
			<table id="contentElem" class="cf"/>		
		</div>
	</body>

</html>





<!-- 
/*Get the keys of a javascript object.*/
var keys = [];
for(var k in obj) keys.push(k);
console.log("total " + keys.length + " keys: " + keys);
 -->